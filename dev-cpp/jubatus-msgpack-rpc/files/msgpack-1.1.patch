diff --git a/test/attack_callback.cc b/test/attack_callback.cc
index 4acb108..df0c15e 100644
--- a/test/attack_callback.cc
+++ b/test/attack_callback.cc
@@ -37,7 +37,7 @@ void attack_callback()
 		s.set_timeout(30.0);
 
 		rpc::shared_zone msglife(new msgpack::zone());
-		raw_ref msg = raw_ref((char*)msglife->malloc(ATTACK_SIZE), ATTACK_SIZE);
+		raw_ref msg = raw_ref((char*)msglife->allocate_align(ATTACK_SIZE), ATTACK_SIZE);
 
 		for(size_t j=0; j < ATTACK_DEPTH; ++j) {
 			pipeline[j] = s.call("echo_huge", msglife, msg).attach_callback(
diff --git a/test/attack_huge.cc b/test/attack_huge.cc
index 87fac14..1fe4898 100644
--- a/test/attack_huge.cc
+++ b/test/attack_huge.cc
@@ -45,7 +45,7 @@ int main(void)
 		<< std::endl;
 
 	msglife.reset(new msgpack::zone());
-	msg = raw_ref((char*)msglife->malloc(ATTACK_SIZE), ATTACK_SIZE);
+	msg = raw_ref((char*)msglife->allocate_align(ATTACK_SIZE), ATTACK_SIZE);
 
 	test.reset(new attacker());
 	test->run(ATTACK_THREAD, &attack_huge);

commit 1ee3a4e00afb0d57a852dfad6dca4d3e713fa620
Author: Kenichi Maehashi <webmaster@kenichimaehashi.com>
Date:   Fri Jun 19 10:42:47 2015 +0900

    support MessagePack-1.1

diff --git a/src/jubatus/msgpack/rpc/exception.cc b/src/jubatus/msgpack/rpc/exception.cc
index 0f28517..460fa9f 100644
--- a/src/jubatus/msgpack/rpc/exception.cc
+++ b/src/jubatus/msgpack/rpc/exception.cc
@@ -56,20 +56,20 @@ void throw_exception(future_impl* f)
         //   caused by *local* errors. Otherwise, caused by
         //   *remote* errors or delivered errors from remote.
 
-	if(err.type == msgpack::type::RAW &&
-			err.via.raw.ptr == TIMEOUT_ERROR_PTR) {
+	if(err.type == msgpack::type::BIN &&
+			err.via.bin.ptr == TIMEOUT_ERROR_PTR) {
 		throw timeout_error();
 
-	} else if(err.type == msgpack::type::RAW &&
-			err.via.raw.ptr == CONNECT_ERROR_PTR) {
+	} else if(err.type == msgpack::type::BIN &&
+			err.via.bin.ptr == CONNECT_ERROR_PTR) {
 		throw connect_error();
 
-        } else if(err.type == msgpack::type::RAW &&
-			err.via.raw.ptr == REQUEST_CANCELLED_PTR) {
+        } else if(err.type == msgpack::type::BIN &&
+			err.via.bin.ptr == REQUEST_CANCELLED_PTR) {
 		throw request_cancelled();
 
-        } else if(err.type == msgpack::type::RAW &&
-			err.via.raw.ptr == CONNECTION_CLOSED_ERROR_PTR) {
+        } else if(err.type == msgpack::type::BIN &&
+			err.via.bin.ptr == CONNECTION_CLOSED_ERROR_PTR) {
 		throw connection_closed_error();
 
         } else if(err.type == msgpack::type::NEGATIVE_INTEGER ) {
@@ -87,11 +87,11 @@ void throw_exception(future_impl* f)
 			err.via.u64 == ARGUMENT_ERROR) {
 		throw argument_error();
 
-        } else if ( err.type == msgpack::type::RAW ) {
+        } else if ( err.type == msgpack::type::BIN ) {
           // maybe simple error message
           
           std::ostringstream os;
-          os.write(err.via.raw.ptr, err.via.raw.size);
+          os.write(err.via.bin.ptr, err.via.bin.size);
           throw remote_error(os.str(), future(f->shared_from_this()));
 
 	} else {
diff --git a/src/jubatus/msgpack/rpc/transport/base.h b/src/jubatus/msgpack/rpc/transport/base.h
index 04db565..0857550 100644
--- a/src/jubatus/msgpack/rpc/transport/base.h
+++ b/src/jubatus/msgpack/rpc/transport/base.h
@@ -144,8 +144,10 @@ private:
 template <typename MixIn>
 inline stream_handler<MixIn>::stream_handler(int fd, loop lo) :
 	mp::wavy::handler(fd),
-	m_pac(MSGPACK_RPC_STREAM_BUFFER_SIZE),
-	m_loop(lo) { }
+	m_loop(lo)
+	{
+		m_pac.reserve_buffer(MSGPACK_RPC_STREAM_BUFFER_SIZE);
+	}
 
 template <typename MixIn>
 inline stream_handler<MixIn>::~stream_handler() { }
