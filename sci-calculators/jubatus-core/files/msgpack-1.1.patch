commit 44d5b464ed72f467321c94c63db50e4c135e787f
Author: Kazuki Oikawa <k@oikw.org>
Date:   Sat Feb 20 04:08:41 2016 +0900

    msgpack-1.1.0 support !

diff --git a/jubatus/core/bandit/bandit_base.hpp b/jubatus/core/bandit/bandit_base.hpp
index 3c6f857..ad043bf 100644
--- a/jubatus/core/bandit/bandit_base.hpp
+++ b/jubatus/core/bandit/bandit_base.hpp
@@ -20,17 +20,10 @@
 #include <string>
 
 #include "arm_info.hpp"
+#include "../framework/packer.hpp"
 
-namespace msgpack {
-template <typename T>
-class packer;
-}  // namespace msgpack
 namespace jubatus {
 namespace core {
-namespace framework {
-class jubatus_packer;
-typedef msgpack::packer<jubatus_packer> packer;
-}  // namespace framework
 namespace storage {
 class version;
 }  // namespace storage
diff --git a/jubatus/core/bandit/epsilon_greedy.cpp b/jubatus/core/bandit/epsilon_greedy.cpp
index b5e5aa1..6ce06b3 100644
--- a/jubatus/core/bandit/epsilon_greedy.cpp
+++ b/jubatus/core/bandit/epsilon_greedy.cpp
@@ -86,7 +86,7 @@ void epsilon_greedy::clear() {
 }
 
 void epsilon_greedy::pack(framework::packer& pk) const {
-  pk.pack(s_);
+  msgpack::pack(pk, s_);
 }
 void epsilon_greedy::unpack(msgpack::object o) {
   o.convert(&s_);
diff --git a/jubatus/core/bandit/exp3.cpp b/jubatus/core/bandit/exp3.cpp
index 7b34a9b..8296a42 100644
--- a/jubatus/core/bandit/exp3.cpp
+++ b/jubatus/core/bandit/exp3.cpp
@@ -104,7 +104,7 @@ void exp3::clear() {
 }
 
 void exp3::pack(framework::packer& pk) const {
-  pk.pack(s_);
+  msgpack::pack(pk, s_);
 }
 void exp3::unpack(msgpack::object o) {
   o.convert(&s_);
diff --git a/jubatus/core/bandit/softmax.cpp b/jubatus/core/bandit/softmax.cpp
index c5b76be..4240b45 100644
--- a/jubatus/core/bandit/softmax.cpp
+++ b/jubatus/core/bandit/softmax.cpp
@@ -81,7 +81,7 @@ void softmax::clear() {
 }
 
 void softmax::pack(framework::packer& pk) const {
-  pk.pack(s_);
+  msgpack::pack(pk, s_);
 }
 void softmax::unpack(msgpack::object o) {
   o.convert(&s_);
diff --git a/jubatus/core/bandit/ucb1.cpp b/jubatus/core/bandit/ucb1.cpp
index be9a65d..413f2df 100644
--- a/jubatus/core/bandit/ucb1.cpp
+++ b/jubatus/core/bandit/ucb1.cpp
@@ -83,7 +83,7 @@ void ucb1::clear() {
 }
 
 void ucb1::pack(framework::packer& pk) const {
-  pk.pack(s_);
+  msgpack::pack(pk, s_);
 }
 void ucb1::unpack(msgpack::object o) {
   o.convert(&s_);
diff --git a/jubatus/core/common/byte_buffer.hpp b/jubatus/core/common/byte_buffer.hpp
index 9becfbf..ab0a7ad 100644
--- a/jubatus/core/common/byte_buffer.hpp
+++ b/jubatus/core/common/byte_buffer.hpp
@@ -101,45 +101,61 @@ inline void swap(byte_buffer& one, byte_buffer& another) {  // NOLINT
 }  // namespace jubatus
 
 namespace msgpack {
+MSGPACK_API_VERSION_NAMESPACE(MSGPACK_DEFAULT_API_NS) {
+namespace adaptor {
+
+template <>
+struct convert<jubatus::core::common::byte_buffer> {
+  msgpack::object const& operator()(
+      msgpack::object const& o,
+      jubatus::core::common::byte_buffer& b) const {
+    if (o.type != type::BIN) {
+      throw type_error();
+    }
 
-inline jubatus::core::common::byte_buffer& operator>>(
-    object o,
-    jubatus::core::common::byte_buffer& b) {
-  if (o.type != type::RAW) {
-    throw type_error();
+    b.assign(o.via.bin.ptr, o.via.bin.size);
+    return o;
   }
+};
 
-  b.assign(o.via.raw.ptr, o.via.raw.size);
-  return b;
-}
-
-template<typename Stream>
-inline packer<Stream>& operator<<(
-    packer<Stream>& o,
-    const jubatus::core::common::byte_buffer& b) {
-  o.pack_raw(b.size());
-  o.pack_raw_body(b.ptr(), b.size());
-  return o;
-}
+template <>
+struct pack<jubatus::core::common::byte_buffer> {
+  template <typename Stream>
+  msgpack::packer<Stream>& operator()(
+      msgpack::packer<Stream>& o,
+      jubatus::core::common::byte_buffer const& b) const {
+    o.pack_bin(b.size());
+    o.pack_bin_body(b.ptr(), b.size());
+    return o;
+  }
+};
 
-inline void operator<<(
-    object::with_zone& o,
-    const jubatus::core::common::byte_buffer& b) {
-  o.type = type::RAW;
-  char* ptr = static_cast<char*>(o.zone->malloc(b.size()));
-  o.via.raw.ptr = ptr;
-  o.via.raw.size = static_cast<uint32_t>(b.size());
-  std::memcpy(ptr, b.ptr(), b.size());
-}
+template <>
+struct object<jubatus::core::common::byte_buffer> {
+  void operator()(
+      msgpack::object& o,
+      jubatus::core::common::byte_buffer const& b) const {
+    o.type = type::BIN;
+    o.via.bin.ptr = b.ptr();
+    o.via.bin.size = static_cast<uint32_t>(b.size());
+  }
+};
 
-inline void operator<<(
-    object& o,
-    const jubatus::core::common::byte_buffer& b) {
-  o.type = type::RAW;
-  o.via.raw.ptr = b.ptr();
-  o.via.raw.size = static_cast<uint32_t>(b.size());
-}
+template <>
+struct object_with_zone<jubatus::core::common::byte_buffer> {
+  void operator()(
+      msgpack::object::with_zone& o,
+      jubatus::core::common::byte_buffer const& b) const {
+    o.type = type::BIN;
+    char* ptr = static_cast<char*>(o.zone.allocate_no_align(b.size()));
+    o.via.bin.ptr = ptr;
+    o.via.bin.size = static_cast<uint32_t>(b.size());
+    std::memcpy(ptr, b.ptr(), b.size());
+  }
+};
 
+}  // namespace adaptor
+}  // MSGPACK_API_VERSION_NAMESPACE(MSGPACK_DEFAULT_API_NS)
 }  // namespace msgpack
 
 #endif  // JUBATUS_CORE_COMMON_BYTE_BUFFER_HPP_
diff --git a/jubatus/core/common/unordered_map.hpp b/jubatus/core/common/unordered_map.hpp
index 0b67312..119ff7d 100644
--- a/jubatus/core/common/unordered_map.hpp
+++ b/jubatus/core/common/unordered_map.hpp
@@ -23,43 +23,47 @@
 // to make util::data::unordered_map serializable
 
 namespace msgpack {
+MSGPACK_API_VERSION_NAMESPACE(MSGPACK_DEFAULT_API_NS) {
+namespace adaptor {
 
-template<typename K, typename V, typename H, typename E, typename A>
-inline jubatus::util::data::unordered_map<K, V, H, E, A> operator>>(
-    object o,
-    jubatus::util::data::unordered_map<K, V, H, E, A>& v) {
-  if (o.type != type::MAP) {
-    throw type_error();
+template <typename K, typename V, typename H, typename E, typename A>
+struct convert<jubatus::util::data::unordered_map<K, V, H, E, A> > {
+  msgpack::object const& operator()(
+      msgpack::object const& o,
+      jubatus::util::data::unordered_map<K, V, H, E, A>& v) const {
+    if (o.type != type::MAP) {
+      throw type_error();
+    }
+    object_kv* const p_end = o.via.map.ptr + o.via.map.size;
+    for (object_kv* p = o.via.map.ptr; p != p_end; ++p) {
+      K key;
+      p->key.convert(&key);
+      p->val.convert(&v[key]);
+    }
+    return o;
   }
-  object_kv* const p_end = o.via.map.ptr + o.via.map.size;
-  for (object_kv* p = o.via.map.ptr; p != p_end; ++p) {
-    K key;
-    p->key.convert(&key);
-    p->val.convert(&v[key]);
-  }
-  return v;
-}
+};
 
-template<typename Stream,
-         typename K,
-         typename V,
-         typename H,
-         typename E,
-         typename A>
-inline packer<Stream>& operator<<(
-    packer<Stream>& o,
-    const jubatus::util::data::unordered_map<K, V, H, E, A>& v) {
-  o.pack_map(v.size());
-  typedef typename
-    jubatus::util::data::unordered_map<K, V, H, E, A>::const_iterator
-    iter_t;
-  for (iter_t it = v.begin(); it != v.end(); ++it) {
-    o.pack(it->first);
-    o.pack(it->second);
+template <typename K, typename V, typename H, typename E, typename A>
+struct pack<jubatus::util::data::unordered_map<K, V, H, E, A> > {
+  template <typename Stream>
+  msgpack::packer<Stream>& operator()(
+      msgpack::packer<Stream>& o,
+      jubatus::util::data::unordered_map<K, V, H, E, A> const& v) const {
+    o.pack_map(v.size());
+    typedef typename
+      jubatus::util::data::unordered_map<K, V, H, E, A>::const_iterator
+      iter_t;
+    for (iter_t it = v.begin(); it != v.end(); ++it) {
+      o.pack(it->first);
+      o.pack(it->second);
+    }
+    return o;
   }
-  return o;
-}
+};
 
+}  // namespace adaptor
+}  // MSGPACK_API_VERSION_NAMESPACE(MSGPACK_DEFAULT_API_NS)
 }  // namespace msgpack
 
 #endif  // JUBATUS_CORE_COMMON_UNORDERED_MAP_HPP_
diff --git a/jubatus/core/framework/mixable_helper.hpp b/jubatus/core/framework/mixable_helper.hpp
index c3b141f..3ba2f71 100644
--- a/jubatus/core/framework/mixable_helper.hpp
+++ b/jubatus/core/framework/mixable_helper.hpp
@@ -85,7 +85,7 @@ class linear_mixable_helper : public linear_mixable {
   void get_diff(packer& pk) const {
     Diff diff;
     model_->get_diff(diff);
-    pk.pack(diff);
+    msgpack::pack(pk, diff);
   }
 
   bool put_diff(const diff_object& ptr) {
@@ -105,7 +105,7 @@ class linear_mixable_helper : public linear_mixable {
  private:
   struct internal_diff_object : diff_object_raw {
     void convert_binary(packer& pk) const {
-      pk.pack(diff_);
+      msgpack::pack(pk, diff_);
     }
 
     Diff diff_;
diff --git a/jubatus/core/framework/mixable_versioned_table.cpp b/jubatus/core/framework/mixable_versioned_table.cpp
index dce30fe..0cfc819 100644
--- a/jubatus/core/framework/mixable_versioned_table.cpp
+++ b/jubatus/core/framework/mixable_versioned_table.cpp
@@ -47,8 +47,8 @@ struct internal_diff : framework::diff_object_raw {
     core::framework::packer p(jp);
     p.pack(objs);
 
-    pk.pack_raw(data.size());
-    pk.pack_raw_body(data.data(), data.size());
+    pk.pack_bin(data.size());
+    pk.pack_bin_body(data.data(), data.size());
   }
 
   vector<msgpack::object> objs;
@@ -59,7 +59,7 @@ struct internal_diff : framework::diff_object_raw {
 
 framework::diff_object mixable_versioned_table::convert_diff_object(
     const msgpack::object& obj) const {
-  if (obj.type != msgpack::type::RAW) {
+  if (obj.type != msgpack::type::BIN) {
     throw JUBATUS_EXCEPTION(
         core::common::exception::runtime_error("bad diff_object"));
   }
@@ -67,7 +67,7 @@ framework::diff_object mixable_versioned_table::convert_diff_object(
   diff_object diff_obj(diff);
 
   msgpack::unpacked msg;
-  msgpack::unpack(&msg, obj.via.raw.ptr, obj.via.raw.size);
+  msgpack::unpack(&msg, obj.via.bin.ptr, obj.via.bin.size);
 
   msg.get().convert(&diff->objs);
   if (!diff->objs.empty()) {
@@ -85,8 +85,8 @@ void mixable_versioned_table::get_diff(framework::packer& pk) const {
   pull_impl(vc_, p);
 
   // Wrap msgpack binary more for holding msgpack::zone in internal diff_object.
-  pk.pack_raw(data.size());
-  pk.pack_raw_body(data.data(), data.size());
+  pk.pack_bin(data.size());
+  pk.pack_bin_body(data.data(), data.size());
 }
 
 bool mixable_versioned_table::put_diff(const framework::diff_object& ptr) {
@@ -115,12 +115,12 @@ void mixable_versioned_table::mix(
         core::common::exception::runtime_error("bad diff_object"));
   }
 
-  if (obj.type != msgpack::type::RAW) {
+  if (obj.type != msgpack::type::BIN) {
     throw JUBATUS_EXCEPTION(
         core::common::exception::runtime_error("bad diff_object"));
   }
   msgpack::unpacked msg;
-  msgpack::unpack(&msg, obj.via.raw.ptr, obj.via.raw.size);
+  msgpack::unpack(&msg, obj.via.bin.ptr, obj.via.bin.size);
   msgpack::object o = msg.get();
   if (o.type != msgpack::type::ARRAY) {
     throw JUBATUS_EXCEPTION(
diff --git a/jubatus/core/framework/packer.hpp b/jubatus/core/framework/packer.hpp
index 0bd5fd5..9664972 100644
--- a/jubatus/core/framework/packer.hpp
+++ b/jubatus/core/framework/packer.hpp
@@ -33,14 +33,14 @@ class jubatus_packer {
  public:
   explicit jubatus_packer(jubatus_writer& w) : writer_(w) {
   }
-  void write(const char* buf, unsigned int len) {
-    writer_.write(buf, len);
+  void write(const char* buf, std::size_t len) {
+    writer_.write(buf, static_cast<unsigned int>(len));
   }
  private:
   jubatus_writer& writer_;
 };
 
-typedef msgpack::packer<jubatus_packer> packer;
+typedef msgpack::MSGPACK_DEFAULT_API_NS::packer<jubatus_packer> packer;
 
 }  // namespace framework
 }  // namespace core
diff --git a/jubatus/core/fv_converter/msgpack_converter.cpp b/jubatus/core/fv_converter/msgpack_converter.cpp
index e42d305..3106879 100644
--- a/jubatus/core/fv_converter/msgpack_converter.cpp
+++ b/jubatus/core/fv_converter/msgpack_converter.cpp
@@ -56,16 +56,23 @@ void iter_convert(
       break;
     }
 
-    case msgpack::type::DOUBLE: {
-      double v = object.via.dec;
+    case msgpack::type::FLOAT: {
+      double v = object.via.f64;
       datum.num_values_.push_back(std::make_pair(path, v));
       break;
     }
 
-    case msgpack::type::RAW: {
-      const msgpack::object_raw& raw = object.via.raw;
+    case msgpack::type::STR: {
+      const msgpack::object_str& str = object.via.str;
       datum.string_values_.push_back(
-          std::make_pair(path, std::string(raw.ptr, raw.size)));
+          std::make_pair(path, std::string(str.ptr, str.size)));
+      break;
+    }
+
+    case msgpack::type::BIN: {
+      const msgpack::object_bin& bin = object.via.bin;
+      datum.binary_values_.push_back(
+          std::make_pair(path, std::string(bin.ptr, bin.size)));
       break;
     }
 
diff --git a/jubatus/core/fv_converter/msgpack_converter.hpp b/jubatus/core/fv_converter/msgpack_converter.hpp
index c08b681..9d69e83 100644
--- a/jubatus/core/fv_converter/msgpack_converter.hpp
+++ b/jubatus/core/fv_converter/msgpack_converter.hpp
@@ -17,9 +17,7 @@
 #ifndef JUBATUS_CORE_FV_CONVERTER_MSGPACK_CONVERTER_HPP_
 #define JUBATUS_CORE_FV_CONVERTER_MSGPACK_CONVERTER_HPP_
 
-namespace msgpack {
-struct object;
-}  // namespace msgpack
+#include <msgpack.hpp>
 
 namespace jubatus {
 namespace core {
diff --git a/jubatus/core/storage/bit_vector.hpp b/jubatus/core/storage/bit_vector.hpp
index 1254b3d..49c0e36 100644
--- a/jubatus/core/storage/bit_vector.hpp
+++ b/jubatus/core/storage/bit_vector.hpp
@@ -388,18 +388,18 @@ struct bit_vector_base {
   void msgpack_pack(msgpack::packer<Buffer>& packer) const {
     packer.pack_array(2);
     packer.pack(static_cast<uint64_t>(bit_num_));
-    packer.pack_raw(used_bytes());
+    packer.pack_bin(used_bytes());
     if (bits_) {
       const size_t n = used_bytes() / BLOCKSIZE;
       for (size_t i = 0; i < n; ++i) {
         char buf[BLOCKSIZE];
         common::write_big_endian(bits_[i], buf);
-        packer.pack_raw_body(buf, BLOCKSIZE);
+        packer.pack_bin_body(buf, BLOCKSIZE);
       }
     } else {
       const char c = 0;
       for (size_t i = 0; i < used_bytes(); ++i) {
-        packer.pack_raw_body(&c, 1);
+        packer.pack_bin_body(&c, 1);
       }
     }
   }
diff --git a/jubatus_core.pc.in b/jubatus_core.pc.in
index badb003..79acce5 100644
--- a/jubatus_core.pc.in
+++ b/jubatus_core.pc.in
@@ -7,4 +7,4 @@ Name: @PACKAGE@
 Description: Framework and Library for Distributed Online Machine Learning
 Version: @VERSION@
 Cflags: -I${includedir}
-Libs: -L${libdir} -ljubatus_core -lmsgpack -ljubatus_util_concurrent -ljubatus_util_data -ljubatus_util_lang -ljubatus_util_math -ljubatus_util_system -ljubatus_util_text
+Libs: -L${libdir} -ljubatus_core -ljubatus_util_concurrent -ljubatus_util_data -ljubatus_util_lang -ljubatus_util_math -ljubatus_util_system -ljubatus_util_text
diff --git a/wscript b/wscript
index 6babbd7..28696a3 100644
--- a/wscript
+++ b/wscript
@@ -60,7 +60,7 @@ def configure(conf):
   conf.env.VERSION = VERSION
   conf.env.ABI_VERSION = ABI_VERSION
 
-  conf.check_cxx(lib = 'msgpack')
+  conf.check_cxx(header_name = 'msgpack.hpp')
 
   if Options.options.debug:
     conf.define('_GLIBCXX_DEBUG', 1)
