diff --git a/CMakeLists.txt b/CMakeLists.txt
index 85727e2ad651..bd36b1fe9e33 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -323,7 +323,7 @@ if(NOT ROCM_CXX_FLAGS)
   # __float128 even though it is not supported for CUDA / HIP,
   # see https://bugs.llvm.org/show_bug.cgi?id=47559.
 
-  set(ROCM_CXX_FLAGS "-isystem $HIPSYCL_PATH/include/hipSYCL/std/hiplike -isystem ${CLANG_INCLUDE_PATH} -U__FLOAT128__ -U__SIZEOF_FLOAT128__ -I$HIPSYCL_ROCM_PATH/include -I$HIPSYCL_ROCM_PATH/include --rocm-device-lib-path=$HIPSYCL_ROCM_PATH/amdgcn/bitcode --rocm-path=$HIPSYCL_ROCM_PATH -fhip-new-launch-api -mllvm -amdgpu-early-inline-all=true -mllvm -amdgpu-function-calls=false -D__HIP_ROCclr__" CACHE STRING "Arguments passed to compiler to compile SYCL applications with ROCm")
+  set(ROCM_CXX_FLAGS "-isystem $HIPSYCL_PATH/include/hipSYCL/std/hiplike -isystem ${CLANG_INCLUDE_PATH} -U__FLOAT128__ -U__SIZEOF_FLOAT128__ -I$HIPSYCL_ROCM_PATH/include -I$HIPSYCL_ROCM_PATH/include --rocm-device-lib-path=/usr/lib/amdgcn/bitcode --rocm-path=$HIPSYCL_ROCM_PATH -fhip-new-launch-api -mllvm -amdgpu-early-inline-all=true -mllvm -amdgpu-function-calls=false -D__HIP_ROCclr__" CACHE STRING "Arguments passed to compiler to compile SYCL applications with ROCm")
 endif()
 
 if(NOT CUDA_CXX_FLAGS)	
@@ -381,7 +381,7 @@ set(SYCLCC_CONFIG_FILE "{
 file(WRITE ${SYCLCC_CONFIG_FILE_PATH} ${SYCLCC_CONFIG_FILE})
 
 set(HIPSYCL_INSTALL_CMAKE_DIR
-  "lib/cmake/${PROJECT_NAME}" CACHE PATH "Install path for CMake config files")
+  "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}" CACHE PATH "Install path for CMake config files")
 
 # must stay after add_subdirectory(src) as HIPSYCL_COMMON_LIBRARY_OUTPUT_NAME is declared there
 configure_file(
diff --git a/bin/syclcc-clang b/bin/syclcc-clang
index 8632962e1386..051f99aedf67 100755
--- a/bin/syclcc-clang
+++ b/bin/syclcc-clang
@@ -493,16 +493,16 @@ class syclcc_config:
   def _get_rocm_substitution_vars(self):
     return {
       'OPENSYCL_ROCM_PATH' : self.rocm_path,
-      'OPENSYCL_ROCM_LIB_PATH' : os.path.join(self.rocm_path, "lib"),
+      'OPENSYCL_ROCM_LIB_PATH' : os.path.join(self.rocm_path, "lib64"),
       'OPENSYCL_PATH' : self.opensycl_installation_path,
-      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib")
+      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib64")
     }
 
   def _get_cuda_substitution_vars(self):
     vars = {
       'OPENSYCL_CUDA_PATH' : self.cuda_path,
       'OPENSYCL_PATH' : self.opensycl_installation_path,
-      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib")
+      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib64")
     }
     if sys.platform.startswith("win32"):
       vars['OPENSYCL_CUDA_LIB_PATH'] = os.path.join(self.cuda_path, "lib", "x64")
@@ -514,7 +514,7 @@ class syclcc_config:
   def _get_omp_substitution_vars(self):
     return {
       'OPENSYCL_PATH' : self.opensycl_installation_path,
-      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib")
+      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib64")
     }
 
   def _substitute_template_string(self, template_string, substitution_dict):
@@ -651,7 +651,7 @@ class syclcc_config:
 
   @property
   def runtime_backends(self):
-    backend_path = os.path.join(self.opensycl_installation_path, "lib", "hipSYCL")
+    backend_path = os.path.join(self.opensycl_installation_path, "lib64", "hipSYCL")
     content = os.listdir(backend_path)
     return [c for c in content if os.path.isfile(os.path.join(backend_path, c))]
 
@@ -731,7 +731,7 @@ class syclcc_config:
     elif sys.platform == "darwin":
       return os.path.join(self.opensycl_installation_path, "lib", "libopensycl-clang.dylib")
     else:
-      return os.path.join(self.opensycl_installation_path, "lib", "libopensycl-clang.so")
+      return os.path.join(self.opensycl_installation_path, "lib64", "libopensycl-clang.so")
 
   @property
   def sequential_link_line(self):
@@ -1127,7 +1127,7 @@ class spirv_multipass_invocation:
   def __init__(self, config):
     self._config = config
     self._opensycl_lib_path = os.path.join(
-      config.opensycl_installation_path, "lib/")
+      config.opensycl_installation_path, "lib64/")
     self.set_temp_dir("/tmp")
 
   def set_temp_dir(self, temp_dir):
@@ -1575,7 +1575,7 @@ class compiler:
     self._targets = config.targets
     self._common_compiler_args = config.common_compiler_args
     self._opensycl_path = config.opensycl_installation_path
-    self._opensycl_lib_path = os.path.join(self._opensycl_path, "lib/")
+    self._opensycl_lib_path = os.path.join(self._opensycl_path, "lib64/")
     self._opensycl_include_path = config.opensycl_include_path
     self._is_explicit_multipass = config.is_explicit_multipass
     self._save_temps = config.save_temps
@@ -1755,7 +1755,6 @@ class compiler:
   @property
   def common_cxx_flags(self):
     args = [
-      "-isystem", self._opensycl_include_path,
       "-D__OPENSYCL__","-D__HIPSYCL__",
     ] + self._common_compiler_args
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index a543391ce5bb..2c5d19951ec4 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -3,7 +3,7 @@ set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
 add_subdirectory(common)
 
 list( APPEND CMAKE_INSTALL_RPATH
-  ${CMAKE_INSTALL_PREFIX}/lib
+  ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}
   ${CMAKE_INSTALL_PREFIX}/lib/hipSYCL/llvm-to-backend)
 
 set(WITH_LLVM_TO_AMDGPU_AMDHSA false)
diff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt
index 7618e93ce2fc..19630668b3e8 100644
--- a/src/common/CMakeLists.txt
+++ b/src/common/CMakeLists.txt
@@ -45,5 +45,5 @@ endif()
 install(TARGETS opensycl-common
         EXPORT install_exports
         RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
diff --git a/src/compiler/CMakeLists.txt b/src/compiler/CMakeLists.txt
index 9a38500a2032..418275accae4 100644
--- a/src/compiler/CMakeLists.txt
+++ b/src/compiler/CMakeLists.txt
@@ -93,8 +93,8 @@ else()
 endif()
 
 install(TARGETS opensycl-clang
-        LIBRARY DESTINATION lib
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
         RUNTIME DESTINATION bin
-        ARCHIVE DESTINATION lib)
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 add_subdirectory(llvm-to-backend)
diff --git a/src/runtime/CMakeLists.txt b/src/runtime/CMakeLists.txt
index a12de89b12d9..7716e8bd76a5 100644
--- a/src/runtime/CMakeLists.txt
+++ b/src/runtime/CMakeLists.txt
@@ -82,8 +82,8 @@ endif()
 install(TARGETS hipSYCL-rt
         EXPORT install_exports
         RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 
 if(WITH_CUDA_BACKEND)
@@ -114,8 +114,8 @@ if(WITH_CUDA_BACKEND)
 
   install(TARGETS rt-backend-cuda
         RUNTIME DESTINATION bin/hipSYCL
-        LIBRARY DESTINATION lib/hipSYCL
-        ARCHIVE DESTINATION lib/hipSYCL)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
 
 if(WITH_ROCM_BACKEND)
@@ -156,8 +156,8 @@ if(WITH_ROCM_BACKEND)
 
   install(TARGETS rt-backend-hip
         RUNTIME DESTINATION bin/hipSYCL
-        LIBRARY DESTINATION lib/hipSYCL
-        ARCHIVE DESTINATION lib/hipSYCL)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
 
 if(WITH_LEVEL_ZERO_BACKEND)
@@ -181,8 +181,8 @@ if(WITH_LEVEL_ZERO_BACKEND)
   endif()
 
   install(TARGETS rt-backend-ze
-        LIBRARY DESTINATION lib/hipSYCL
-        ARCHIVE DESTINATION lib/hipSYCL)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
 
 if(WITH_CPU_BACKEND)
@@ -223,7 +223,6 @@ if(WITH_CPU_BACKEND)
 
   install(TARGETS rt-backend-omp
       RUNTIME DESTINATION bin/hipSYCL
-      LIBRARY DESTINATION lib/hipSYCL
-      ARCHIVE DESTINATION lib/hipSYCL)
+      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
-
