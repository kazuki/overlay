diff --git a/CMakeLists.txt b/CMakeLists.txt
index 6f7a645e..8bf406e9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -323,7 +323,7 @@ if(NOT ROCM_CXX_FLAGS)
   # __float128 even though it is not supported for CUDA / HIP,
   # see https://bugs.llvm.org/show_bug.cgi?id=47559.
 
-  set(ROCM_CXX_FLAGS "-isystem $HIPSYCL_PATH/include/hipSYCL/std/hiplike -isystem ${CLANG_INCLUDE_PATH} -U__FLOAT128__ -U__SIZEOF_FLOAT128__ -I$HIPSYCL_ROCM_PATH/include -I$HIPSYCL_ROCM_PATH/include --rocm-device-lib-path=$HIPSYCL_ROCM_PATH/amdgcn/bitcode --rocm-path=$HIPSYCL_ROCM_PATH -fhip-new-launch-api -mllvm -amdgpu-early-inline-all=true -mllvm -amdgpu-function-calls=false -D__HIP_ROCclr__" CACHE STRING "Arguments passed to compiler to compile SYCL applications with ROCm")
+  set(ROCM_CXX_FLAGS "-isystem $HIPSYCL_PATH/include/hipSYCL/std/hiplike -isystem ${CLANG_INCLUDE_PATH} -U__FLOAT128__ -U__SIZEOF_FLOAT128__ -I$HIPSYCL_ROCM_PATH/include -I$HIPSYCL_ROCM_PATH/include --rocm-device-lib-path=/usr/lib/amdgcn/bitcode --rocm-path=$HIPSYCL_ROCM_PATH -fhip-new-launch-api -mllvm -amdgpu-early-inline-all=true -mllvm -amdgpu-function-calls=false -D__HIP_ROCclr__" CACHE STRING "Arguments passed to compiler to compile SYCL applications with ROCm")
 endif()
 
 if(NOT CUDA_CXX_FLAGS)	
@@ -416,7 +416,7 @@ include(GNUInstallDirs)
 
 
 set(HIPSYCL_INSTALL_CMAKE_DIR
-  "lib/cmake/hipSYCL" CACHE PATH "Install path for legacy CMake config files")
+  "${CMAKE_INSTALL_LIBDIR}/cmake/hipSYCL" CACHE PATH "Install path for legacy CMake config files")
 
 # Set relative paths for install root in the following variables so that
 # configure_package_config_file will generate paths relative whatever is
@@ -464,7 +464,7 @@ mark_as_advanced(
 # New package
 
 set(OPENSYCL_INSTALL_CMAKE_DIR
-  "lib/cmake/OpenSYCL" CACHE PATH "Install path for CMake config files")
+  "${CMAKE_INSTALL_LIBDIR}/cmake/OpenSYCL" CACHE PATH "Install path for CMake config files")
 
 # Set relative paths for install root in the following variables so that
 # configure_package_config_file will generate paths relative whatever is
diff --git a/bin/syclcc-clang b/bin/syclcc-clang
index 862c7a70..b3e8fa3f 100755
--- a/bin/syclcc-clang
+++ b/bin/syclcc-clang
@@ -494,16 +494,16 @@ class syclcc_config:
   def _get_rocm_substitution_vars(self):
     return {
       'OPENSYCL_ROCM_PATH' : self.rocm_path,
-      'OPENSYCL_ROCM_LIB_PATH' : os.path.join(self.rocm_path, "lib"),
+      'OPENSYCL_ROCM_LIB_PATH' : os.path.join(self.rocm_path, "lib64"),
       'OPENSYCL_PATH' : self.opensycl_installation_path,
-      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib")
+      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib64")
     }
 
   def _get_cuda_substitution_vars(self):
     vars = {
       'OPENSYCL_CUDA_PATH' : self.cuda_path,
       'OPENSYCL_PATH' : self.opensycl_installation_path,
-      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib")
+      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib64")
     }
     if sys.platform.startswith("win32"):
       vars['OPENSYCL_CUDA_LIB_PATH'] = os.path.join(self.cuda_path, "lib", "x64")
@@ -515,7 +515,7 @@ class syclcc_config:
   def _get_omp_substitution_vars(self):
     return {
       'OPENSYCL_PATH' : self.opensycl_installation_path,
-      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib")
+      'OPENSYCL_LIB_PATH' : os.path.join(self.opensycl_installation_path, "lib64")
     }
 
   def _substitute_template_string(self, template_string, substitution_dict):
@@ -652,7 +652,7 @@ class syclcc_config:
 
   @property
   def runtime_backends(self):
-    backend_path = os.path.join(self.opensycl_installation_path, "lib", "hipSYCL")
+    backend_path = os.path.join(self.opensycl_installation_path, "lib64", "hipSYCL")
     content = os.listdir(backend_path)
     return [c for c in content if os.path.isfile(os.path.join(backend_path, c))]
 
@@ -732,7 +732,7 @@ class syclcc_config:
     elif sys.platform == "darwin":
       return os.path.join(self.opensycl_installation_path, "lib", "libopensycl-clang.dylib")
     else:
-      return os.path.join(self.opensycl_installation_path, "lib", "libopensycl-clang.so")
+      return os.path.join(self.opensycl_installation_path, "lib64", "libopensycl-clang.so")
 
   @property
   def sequential_link_line(self):
@@ -1128,7 +1128,7 @@ class spirv_multipass_invocation:
   def __init__(self, config):
     self._config = config
     self._opensycl_lib_path = os.path.join(
-      config.opensycl_installation_path, "lib/")
+      config.opensycl_installation_path, "lib64/")
     self.set_temp_dir("/tmp")
 
   def set_temp_dir(self, temp_dir):
@@ -1576,7 +1576,7 @@ class compiler:
     self._targets = config.targets
     self._common_compiler_args = config.common_compiler_args
     self._opensycl_path = config.opensycl_installation_path
-    self._opensycl_lib_path = os.path.join(self._opensycl_path, "lib/")
+    self._opensycl_lib_path = os.path.join(self._opensycl_path, "lib64/")
     self._opensycl_include_path = config.opensycl_include_path
     self._is_explicit_multipass = config.is_explicit_multipass
     self._save_temps = config.save_temps
@@ -1756,7 +1756,6 @@ class compiler:
   @property
   def common_cxx_flags(self):
     args = [
-      "-isystem", self._opensycl_include_path,
       "-D__OPENSYCL__","-D__HIPSYCL__",
     ] + self._common_compiler_args
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index a543391c..efd27899 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -3,8 +3,8 @@ set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
 add_subdirectory(common)
 
 list( APPEND CMAKE_INSTALL_RPATH
-  ${CMAKE_INSTALL_PREFIX}/lib
-  ${CMAKE_INSTALL_PREFIX}/lib/hipSYCL/llvm-to-backend)
+  ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}
+  ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/hipSYCL/llvm-to-backend)
 
 set(WITH_LLVM_TO_AMDGPU_AMDHSA false)
 set(WITH_LLVM_TO_PTX false)
diff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt
index 7618e93c..19630668 100644
--- a/src/common/CMakeLists.txt
+++ b/src/common/CMakeLists.txt
@@ -45,5 +45,5 @@ endif()
 install(TARGETS opensycl-common
         EXPORT install_exports
         RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
diff --git a/src/compiler/CMakeLists.txt b/src/compiler/CMakeLists.txt
index 03758bb1..908903b3 100644
--- a/src/compiler/CMakeLists.txt
+++ b/src/compiler/CMakeLists.txt
@@ -84,7 +84,7 @@ target_link_libraries(opensycl-clang
 if(APPLE)
   target_link_libraries(opensycl-clang -Wl,-undefined -Wl,dynamic_lookup)
 elseif(WIN32)
-  set(CLANG_LIBRARY_DIR ${LLVM_PREFIX_DIR}/lib/)
+  set(CLANG_LIBRARY_DIR ${LLVM_PREFIX_DIR}/${CMAKE_INSTALL_LIBDIR}/)
   target_link_directories(opensycl-clang PRIVATE ${CLANG_LIBRARY_DIR})
   target_link_libraries(opensycl-clang clang LLVMSupport)
   set_target_properties(opensycl-clang PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS On)
@@ -93,8 +93,8 @@ else()
 endif()
 
 install(TARGETS opensycl-clang
-        LIBRARY DESTINATION lib
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
         RUNTIME DESTINATION bin
-        ARCHIVE DESTINATION lib)
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 add_subdirectory(llvm-to-backend)
diff --git a/src/compiler/llvm-to-backend/CMakeLists.txt b/src/compiler/llvm-to-backend/CMakeLists.txt
index 455967ed..3b94493c 100644
--- a/src/compiler/llvm-to-backend/CMakeLists.txt
+++ b/src/compiler/llvm-to-backend/CMakeLists.txt
@@ -29,7 +29,7 @@ function(create_llvm_based_library)
   target_compile_definitions(${target} PRIVATE ${LLVM_DEFINITIONS} -DHIPSYCL_COMPILER_COMPONENT)
   llvm_config(${target} USE_SHARED core support irreader passes)
 
-  install(TARGETS ${target} DESTINATION lib/hipSYCL/llvm-to-backend)
+  install(TARGETS ${target} DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL/llvm-to-backend)
 endfunction()
 
 function(create_llvm_to_backend_library)
@@ -72,7 +72,7 @@ function(create_llvm_to_backend_tool)
   target_compile_definitions(${target}-tool PRIVATE ${LLVM_DEFINITIONS} -DHIPSYCL_TOOL_COMPONENT)
   target_link_libraries(${target}-tool PRIVATE ${target})
 
-  install(TARGETS ${target}-tool DESTINATION lib/hipSYCL/llvm-to-backend)
+  install(TARGETS ${target}-tool DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL/llvm-to-backend)
 endfunction()
 
 function(add_hipsycl_llvm_backend)
@@ -111,7 +111,7 @@ if(WITH_SSCP_COMPILER)
     if(NOT LLVMSPIRV_BRANCH)
       set(LLVMSPIRV_BRANCH llvm_release_${LLVM_VERSION_MAJOR}0)
     endif()
-    set(LLVMSPIRV_RELATIVE_INSTALLDIR lib/hipSYCL/ext/llvm-spirv)
+    set(LLVMSPIRV_RELATIVE_INSTALLDIR ${CMAKE_INSTALL_LIBDIR}/hipSYCL/ext/llvm-spirv)
     set(LLVMSPIRV_INSTALLDIR ${CMAKE_INSTALL_PREFIX}/${LLVMSPIRV_RELATIVE_INSTALLDIR})
     set(LLVMSPIRV_PATH ${LLVMSPIRV_INSTALLDIR}/bin/llvm-spirv)
     set(LLVMSPIRV_RELATIVE_PATH ${LLVMSPIRV_RELATIVE_INSTALLDIR}/bin/llvm-spirv)
@@ -156,7 +156,7 @@ if(WITH_SSCP_COMPILER)
     target_compile_definitions(llvm-to-amdgpu PRIVATE
       -DHIPSYCL_ROCM_PATH="${ROCM_PATH}")
 
-    find_library(HIPRTC_LIBRARY hiprtc HINTS ${ROCM_PATH}/lib)
+    find_library(HIPRTC_LIBRARY hiprtc HINTS ${ROCM_PATH}/${CMAKE_INSTALL_LIBDIR})
     if(HIPRTC_LIBRARY)
       message(STATUS "Found hipRTC: ${HIPRTC_LIBRARY}")
       target_compile_definitions(llvm-to-amdgpu PRIVATE -DHIPSYCL_SSCP_AMDGPU_USE_HIPRTC)
diff --git a/src/compiler/llvm-to-backend/amdgpu/LLVMToAmdgpu.cpp b/src/compiler/llvm-to-backend/amdgpu/LLVMToAmdgpu.cpp
index d8f91a0a..20166cce 100644
--- a/src/compiler/llvm-to-backend/amdgpu/LLVMToAmdgpu.cpp
+++ b/src/compiler/llvm-to-backend/amdgpu/LLVMToAmdgpu.cpp
@@ -134,7 +134,7 @@ bool LLVMToAmdgpuTranslator::toBackendFlavor(llvm::Module &M, PassHandler& PH) {
 
   std::string BuiltinBitcodeFile = 
     common::filesystem::join_path(common::filesystem::get_install_directory(),
-      {"lib", "hipSYCL", "bitcode", "libkernel-sscp-amdgpu-amdhsa-full.bc"});
+      {"lib64", "hipSYCL", "bitcode", "libkernel-sscp-amdgpu-amdhsa-full.bc"});
   
   if(!this->linkBitcodeFile(M, BuiltinBitcodeFile))
     return false;
diff --git a/src/compiler/llvm-to-backend/ptx/LLVMToPtx.cpp b/src/compiler/llvm-to-backend/ptx/LLVMToPtx.cpp
index e396e3fb..56ad039f 100644
--- a/src/compiler/llvm-to-backend/ptx/LLVMToPtx.cpp
+++ b/src/compiler/llvm-to-backend/ptx/LLVMToPtx.cpp
@@ -147,7 +147,7 @@ bool LLVMToPtxTranslator::toBackendFlavor(llvm::Module &M, PassHandler& PH) {
 
   std::string BuiltinBitcodeFile = 
     common::filesystem::join_path(common::filesystem::get_install_directory(),
-      {"lib", "hipSYCL", "bitcode", "libkernel-sscp-ptx-full.bc"});
+      {"lib64", "hipSYCL", "bitcode", "libkernel-sscp-ptx-full.bc"});
   
   std::string LibdeviceFile;
   if(!LibdevicePath::get(LibdeviceFile)) {
diff --git a/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp b/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp
index 7251ad80..f17578a2 100644
--- a/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp
+++ b/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp
@@ -171,7 +171,7 @@ bool LLVMToSpirvTranslator::toBackendFlavor(llvm::Module &M, PassHandler& PH) {
 
   std::string BuiltinBitcodeFile = 
     common::filesystem::join_path(common::filesystem::get_install_directory(),
-      {"lib", "hipSYCL", "bitcode", "libkernel-sscp-spirv-full.bc"});
+      {"lib64", "hipSYCL", "bitcode", "libkernel-sscp-spirv-full.bc"});
 
   if (!this->linkBitcodeFile(M, BuiltinBitcodeFile, M.getTargetTriple(), M.getDataLayoutStr()))
     return false;
diff --git a/src/libkernel/sscp/CMakeLists.txt b/src/libkernel/sscp/CMakeLists.txt
index 1cfbc762..4bb90496 100644
--- a/src/libkernel/sscp/CMakeLists.txt
+++ b/src/libkernel/sscp/CMakeLists.txt
@@ -23,7 +23,7 @@ function(libkernel_generate_bitcode_library)
       DEPENDS ${source}
       VERBATIM)
 
-  install(FILES ${target_output_file} DESTINATION lib/hipSYCL/bitcode)
+  install(FILES ${target_output_file} DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL/bitcode)
 endfunction()
 
 function(libkernel_generate_bitcode_target)
@@ -63,7 +63,7 @@ function(libkernel_generate_bitcode_target)
     DEPENDS ${output_files}
   )
 
-  install(FILES ${linked_output} DESTINATION lib/hipSYCL/bitcode)
+  install(FILES ${linked_output} DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL/bitcode)
 
   add_custom_target(libkernel-sscp-${target} ALL
     WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
diff --git a/src/runtime/CMakeLists.txt b/src/runtime/CMakeLists.txt
index a12de89b..1d02f341 100644
--- a/src/runtime/CMakeLists.txt
+++ b/src/runtime/CMakeLists.txt
@@ -82,8 +82,8 @@ endif()
 install(TARGETS hipSYCL-rt
         EXPORT install_exports
         RUNTIME DESTINATION bin
-        LIBRARY DESTINATION lib
-        ARCHIVE DESTINATION lib)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 
 if(WITH_CUDA_BACKEND)
@@ -114,8 +114,8 @@ if(WITH_CUDA_BACKEND)
 
   install(TARGETS rt-backend-cuda
         RUNTIME DESTINATION bin/hipSYCL
-        LIBRARY DESTINATION lib/hipSYCL
-        ARCHIVE DESTINATION lib/hipSYCL)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
 
 if(WITH_ROCM_BACKEND)
@@ -156,8 +156,8 @@ if(WITH_ROCM_BACKEND)
 
   install(TARGETS rt-backend-hip
         RUNTIME DESTINATION bin/hipSYCL
-        LIBRARY DESTINATION lib/hipSYCL
-        ARCHIVE DESTINATION lib/hipSYCL)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
 
 if(WITH_LEVEL_ZERO_BACKEND)
@@ -181,8 +181,8 @@ if(WITH_LEVEL_ZERO_BACKEND)
   endif()
 
   install(TARGETS rt-backend-ze
-        LIBRARY DESTINATION lib/hipSYCL
-        ARCHIVE DESTINATION lib/hipSYCL)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
 
 if(WITH_CPU_BACKEND)
@@ -223,7 +223,7 @@ if(WITH_CPU_BACKEND)
 
   install(TARGETS rt-backend-omp
       RUNTIME DESTINATION bin/hipSYCL
-      LIBRARY DESTINATION lib/hipSYCL
-      ARCHIVE DESTINATION lib/hipSYCL)
+      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
 
