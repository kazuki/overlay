diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9de9ef5a54d4..9ad49f730fc6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -347,7 +347,7 @@ if(NOT ROCM_CXX_FLAGS)
   # __float128 even though it is not supported for CUDA / HIP,
   # see https://bugs.llvm.org/show_bug.cgi?id=47559.
 
-  set(ROCM_CXX_FLAGS "-isystem $HIPSYCL_PATH/include/hipSYCL/std/hiplike -isystem ${CLANG_INCLUDE_PATH} -U__FLOAT128__ -U__SIZEOF_FLOAT128__ -I$HIPSYCL_ROCM_PATH/include -I$HIPSYCL_ROCM_PATH/include --rocm-device-lib-path=$HIPSYCL_ROCM_PATH/amdgcn/bitcode --rocm-path=$HIPSYCL_ROCM_PATH -fhip-new-launch-api -mllvm -amdgpu-early-inline-all=true -mllvm -amdgpu-function-calls=false -D__HIP_ROCclr__" CACHE STRING "Arguments passed to compiler to compile SYCL applications with ROCm")
+  set(ROCM_CXX_FLAGS "-isystem $HIPSYCL_PATH/include/hipSYCL/std/hiplike -isystem ${CLANG_INCLUDE_PATH} -U__FLOAT128__ -U__SIZEOF_FLOAT128__ -I$HIPSYCL_ROCM_PATH/include -I$HIPSYCL_ROCM_PATH/include --rocm-device-lib-path=/usr/lib/amdgcn/bitcode --rocm-path=$HIPSYCL_ROCM_PATH -fhip-new-launch-api -mllvm -amdgpu-early-inline-all=true -mllvm -amdgpu-function-calls=false -D__HIP_ROCclr__" CACHE STRING "Arguments passed to compiler to compile SYCL applications with ROCm")
 endif()
 
 if(NOT CUDA_CXX_FLAGS)	
@@ -439,7 +439,7 @@ include(GNUInstallDirs)
 
 
 set(HIPSYCL_INSTALL_CMAKE_DIR
-  "lib/cmake/hipSYCL" CACHE PATH "Install path for legacy CMake config files")
+  "${CMAKE_INSTALL_LIBDIR}/cmake/hipSYCL" CACHE PATH "Install path for legacy CMake config files")
 
 # Set relative paths for install root in the following variables so that
 # configure_package_config_file will generate paths relative whatever is
@@ -487,7 +487,7 @@ mark_as_advanced(
 # Legacy module (Open SYCL)
 
 set(OPENSYCL_INSTALL_CMAKE_DIR
-  "lib/cmake/OpenSYCL" CACHE PATH "Install path for CMake config files")
+  "${CMAKE_INSTALL_LIBDIR}/cmake/OpenSYCL" CACHE PATH "Install path for CMake config files")
 
 # Set relative paths for install root in the following variables so that
 # configure_package_config_file will generate paths relative whatever is
@@ -535,7 +535,7 @@ mark_as_advanced(
 
 
 set(ADAPTIVECPP_INSTALL_CMAKE_DIR
-  "lib/cmake/AdaptiveCpp" CACHE PATH "Install path for CMake config files")
+  "${CMAKE_INSTALL_LIBDIR}/cmake/AdaptiveCpp" CACHE PATH "Install path for CMake config files")
 
 # Set relative paths for install root in the following variables so that
 # configure_package_config_file will generate paths relative whatever is
diff --git a/bin/acpp b/bin/acpp
index 165a7d4b6898..99e8923ff98c 100755
--- a/bin/acpp
+++ b/bin/acpp
@@ -504,16 +504,16 @@ class acpp_config:
   def _get_rocm_substitution_vars(self):
     return {
       'ACPP_ROCM_PATH' : self.rocm_path,
-      'ACPP_ROCM_LIB_PATH' : os.path.join(self.rocm_path, "lib"),
+      'ACPP_ROCM_LIB_PATH' : os.path.join(self.rocm_path, "lib64"),
       'ACPP_PATH' : self.acpp_installation_path,
-      'ACPP_LIB_PATH' : os.path.join(self.acpp_installation_path, "lib")
+      'ACPP_LIB_PATH' : os.path.join(self.acpp_installation_path, "lib64")
     }
 
   def _get_cuda_substitution_vars(self):
     vars = {
       'ACPP_CUDA_PATH' : self.cuda_path,
       'ACPP_PATH' : self.acpp_installation_path,
-      'ACPP_LIB_PATH' : os.path.join(self.acpp_installation_path, "lib")
+      'ACPP_LIB_PATH' : os.path.join(self.acpp_installation_path, "lib64")
     }
     if sys.platform.startswith("win32"):
       vars['ACPP_CUDA_LIB_PATH'] = os.path.join(self.cuda_path, "lib", "x64")
@@ -525,7 +525,7 @@ class acpp_config:
   def _get_omp_substitution_vars(self):
     return {
       'ACPP_PATH' : self.acpp_installation_path,
-      'ACPP_LIB_PATH' : os.path.join(self.acpp_installation_path, "lib")
+      'ACPP_LIB_PATH' : os.path.join(self.acpp_installation_path, "lib64")
     }
 
   def _substitute_template_string(self, template_string, substitution_dict):
@@ -662,7 +662,7 @@ class acpp_config:
 
   @property
   def runtime_backends(self):
-    backend_path = os.path.join(self.acpp_installation_path, "lib", "hipSYCL")
+    backend_path = os.path.join(self.acpp_installation_path, "lib64", "hipSYCL")
     content = os.listdir(backend_path)
     return [c for c in content if os.path.isfile(os.path.join(backend_path, c))]
 
@@ -742,7 +742,7 @@ class acpp_config:
     elif sys.platform == "darwin":
       return os.path.join(self.acpp_installation_path, "lib", "libacpp-clang.dylib")
     else:
-      return os.path.join(self.acpp_installation_path, "lib", "libacpp-clang.so")
+      return os.path.join(self.acpp_installation_path, "lib64", "libacpp-clang.so")
 
   @property
   def sequential_link_line(self):
@@ -1159,7 +1159,7 @@ class spirv_multipass_invocation:
   def __init__(self, config):
     self._config = config
     self._acpp_lib_path = os.path.join(
-      config.acpp_installation_path, "lib/")
+      config.acpp_installation_path, "lib64/")
     self.set_temp_dir("/tmp")
 
   def set_temp_dir(self, temp_dir):
@@ -1607,7 +1607,7 @@ class compiler:
     self._targets = config.targets
     self._common_compiler_args = config.common_compiler_args
     self._acpp_path = config.acpp_installation_path
-    self._acpp_lib_path = os.path.join(self._acpp_path, "lib/")
+    self._acpp_lib_path = os.path.join(self._acpp_path, "lib64/")
     self._acpp_include_path = config.acpp_include_path
     self._is_explicit_multipass = config.is_explicit_multipass
     self._save_temps = config.save_temps
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index e78934aae9dc..aa9263036565 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -15,8 +15,8 @@ endif()
 add_subdirectory(common)
 
 list( APPEND CMAKE_INSTALL_RPATH
-  ${CMAKE_INSTALL_PREFIX}/lib
-  ${CMAKE_INSTALL_PREFIX}/lib/hipSYCL/llvm-to-backend)
+  ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}
+  ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/hipSYCL/llvm-to-backend)
 
 set(WITH_LLVM_TO_AMDGPU_AMDHSA false)
 set(WITH_LLVM_TO_PTX false)
diff --git a/src/compiler/CMakeLists.txt b/src/compiler/CMakeLists.txt
index e6a1fdf4d6d6..12c25a478977 100644
--- a/src/compiler/CMakeLists.txt
+++ b/src/compiler/CMakeLists.txt
@@ -104,8 +104,8 @@ else()
 endif()
 
 install(TARGETS acpp-clang
-        LIBRARY DESTINATION lib
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
         RUNTIME DESTINATION bin
-        ARCHIVE DESTINATION lib)
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 add_subdirectory(llvm-to-backend)
diff --git a/src/compiler/llvm-to-backend/CMakeLists.txt b/src/compiler/llvm-to-backend/CMakeLists.txt
index ac991b11cb71..d8b64e29d304 100644
--- a/src/compiler/llvm-to-backend/CMakeLists.txt
+++ b/src/compiler/llvm-to-backend/CMakeLists.txt
@@ -31,7 +31,7 @@ function(create_llvm_based_library)
   # We need symbolic functions for stdpar
   target_link_libraries(${target} PRIVATE ${HIPSYCL_STDPAR_RT_LINKER_FLAGS})
 
-  install(TARGETS ${target} DESTINATION lib/hipSYCL/llvm-to-backend)
+  install(TARGETS ${target} DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL/llvm-to-backend)
 endfunction()
 
 function(create_llvm_to_backend_library)
@@ -74,7 +74,7 @@ function(create_llvm_to_backend_tool)
   target_compile_definitions(${target}-tool PRIVATE ${LLVM_DEFINITIONS} -DHIPSYCL_TOOL_COMPONENT)
   target_link_libraries(${target}-tool PRIVATE ${target})
 
-  install(TARGETS ${target}-tool DESTINATION lib/hipSYCL/llvm-to-backend)
+  install(TARGETS ${target}-tool DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL/llvm-to-backend)
 endfunction()
 
 function(add_hipsycl_llvm_backend)
diff --git a/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp b/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp
index 7251ad80ab13..f17578a23b7d 100644
--- a/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp
+++ b/src/compiler/llvm-to-backend/spirv/LLVMToSpirv.cpp
@@ -171,7 +171,7 @@ bool LLVMToSpirvTranslator::toBackendFlavor(llvm::Module &M, PassHandler& PH) {
 
   std::string BuiltinBitcodeFile = 
     common::filesystem::join_path(common::filesystem::get_install_directory(),
-      {"lib", "hipSYCL", "bitcode", "libkernel-sscp-spirv-full.bc"});
+      {"lib64", "hipSYCL", "bitcode", "libkernel-sscp-spirv-full.bc"});
 
   if (!this->linkBitcodeFile(M, BuiltinBitcodeFile, M.getTargetTriple(), M.getDataLayoutStr()))
     return false;
diff --git a/src/libkernel/sscp/CMakeLists.txt b/src/libkernel/sscp/CMakeLists.txt
index 1cfbc762511e..4bb904964e58 100644
--- a/src/libkernel/sscp/CMakeLists.txt
+++ b/src/libkernel/sscp/CMakeLists.txt
@@ -23,7 +23,7 @@ function(libkernel_generate_bitcode_library)
       DEPENDS ${source}
       VERBATIM)
 
-  install(FILES ${target_output_file} DESTINATION lib/hipSYCL/bitcode)
+  install(FILES ${target_output_file} DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL/bitcode)
 endfunction()
 
 function(libkernel_generate_bitcode_target)
@@ -63,7 +63,7 @@ function(libkernel_generate_bitcode_target)
     DEPENDS ${output_files}
   )
 
-  install(FILES ${linked_output} DESTINATION lib/hipSYCL/bitcode)
+  install(FILES ${linked_output} DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL/bitcode)
 
   add_custom_target(libkernel-sscp-${target} ALL
     WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
diff --git a/src/runtime/CMakeLists.txt b/src/runtime/CMakeLists.txt
index 72e9093383a4..4f66d8bb46f9 100644
--- a/src/runtime/CMakeLists.txt
+++ b/src/runtime/CMakeLists.txt
@@ -114,8 +114,8 @@ if(WITH_CUDA_BACKEND)
 
   install(TARGETS rt-backend-cuda
         RUNTIME DESTINATION bin/hipSYCL
-        LIBRARY DESTINATION lib/hipSYCL
-        ARCHIVE DESTINATION lib/hipSYCL)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
 
 if(WITH_ROCM_BACKEND)
@@ -156,8 +156,8 @@ if(WITH_ROCM_BACKEND)
 
   install(TARGETS rt-backend-hip
         RUNTIME DESTINATION bin/hipSYCL
-        LIBRARY DESTINATION lib/hipSYCL
-        ARCHIVE DESTINATION lib/hipSYCL)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
 
 if(WITH_LEVEL_ZERO_BACKEND)
@@ -237,8 +237,8 @@ if(WITH_OPENCL_BACKEND)
   endif()
 
   install(TARGETS rt-backend-ocl
-        LIBRARY DESTINATION lib/hipSYCL
-        ARCHIVE DESTINATION lib/hipSYCL)
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
 
 if(WITH_CPU_BACKEND)
@@ -279,7 +279,7 @@ if(WITH_CPU_BACKEND)
 
   install(TARGETS rt-backend-omp
       RUNTIME DESTINATION bin/hipSYCL
-      LIBRARY DESTINATION lib/hipSYCL
-      ARCHIVE DESTINATION lib/hipSYCL)
+      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL
+      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/hipSYCL)
 endif()
 
